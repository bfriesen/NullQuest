using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace NullQuest.Game.Combat
{
    public class MonsterActionSelector : IActionSelector
    {
        private readonly IDice dice;

        public MonsterActionSelector(IDice dice)
        {
            this.dice = dice;
        }

        public ICombatAction SelectAction(CombatContext combatContext, IEnumerable<ICombatAction> allowedActions)
        {
            var allowedActionsList = allowedActions.ToList();
            var evaluation = GetWeights(combatContext, allowedActionsList);

            var weightedRange = evaluation.Sum(x => x.Value);
            var randomNumberInWeightedRange = dice.Random(1, weightedRange);

            int runningTotal = 0;

            foreach (var possibleAction in evaluation)
            {
                if (possibleAction.Value + runningTotal >= randomNumberInWeightedRange)
                {
                    return allowedActionsList.Single(x => x.CreateHash() == possibleAction.Key);
                }
                else
                {
                    runningTotal += possibleAction.Value;
                }
            }

            throw new InvalidOperationException();
        }

        public Dictionary<int, int> GetWeights(CombatContext combatContext, IEnumerable<ICombatAction> allowedActions)
        {
            var monsterActionsFromCombat = combatContext.CombatLog.Where(entry => entry.Attacker == combatContext.Monster && entry is CombatLogEntryFromAction).Cast<CombatLogEntryFromAction>();
            var lookups = monsterActionsFromCombat.ToLookup(x => x.Type.CreateHash(x.Name));

            var evaluation = new Dictionary<int, int>();

            foreach (var allowedAction in allowedActions)
            {
                if (lookups[allowedAction.CreateHash()].Any())
                {
                    evaluation[allowedAction.CreateHash()] = Math.Max(1, (int)lookups[allowedAction.CreateHash()].Average(x => x.CombatEffect.Damage + x.CombatEffect.Healing));
                }
                else
                {
                    var potentialEffect = allowedAction.GetPotentialCombatOutcome(combatContext.Monster);
                    evaluation[allowedAction.CreateHash()] = Math.Max(1, potentialEffect.Damage + potentialEffect.Healing);
                }
            }

            return evaluation;
        }
    }
}
